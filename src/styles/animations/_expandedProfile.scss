$transition-time: 1.5s;

@mixin step-animate($selector, $styles) {
  $total-steps: 2;
  $transition: "";
  $reverse-transition: "";
  $total-time: $transition-time * $total-steps;

  @each $style in $styles {
    $property: map-get(
      $map: $style,
      $key: "property"
    );
    $step: map-get(
      $map: $style,
      $key: "step"
    );

    @if ($transition != "") {
      $transition: $transition + ", ";
    }

    @if ($reverse-transition != "") {
      $reverse-transition: $reverse-transition + ", ";
    }

    $base-transition: "#{$property} #{$transition-time} ease ";
    $delay: $transition-time * ($step - 1);
    $reverse-delay: $total-time - ($step * $transition-time);

    $transition: $transition + $base-transition + #{$delay};
    $reverse-transition: $reverse-transition +
      $base-transition +
      #{$reverse-delay};
  }

  #{$selector} {
    transition: #{$transition};
  }

  &.reverse {
    #{$selector} {
      transition: #{$reverse-transition};
    }
  }

  &.expanded-profile {
    #{$selector} {
      @content;
    }
  }
}

main {
  @include step-animate(
    ".left-column",
    (
      ("property": "transform", "step": 1),
      ("property": "height", "step": 1),
      ("property": "flex-grow", "step": 2)
    )
  ) {
    transform: translateY(-192px);
    height: calc(100% + 192px);
    flex-grow: 1;
  }

  .left-column {
    .title,
    .profile-label {
      transition: transform $transition-time ease 0s;
    }

    .skills li .spacer {
      transition: flex-grow $transition-time ease $transition-time,
        min-width $transition-time ease $transition-time,
        min-height $transition-time ease $transition-time;
    }
  }

  .right-column {
    transition: width $transition-time ease $transition-time;
  }

  &.reverse {
    .left-column {
      .title,
      .profile-label {
        transition: transform $transition-time ease $transition-time;
      }

      .skills li .spacer {
        transition: flex-grow $transition-time ease 0s,
          min-width $transition-time ease 0s,
          min-height $transition-time ease 0s;
      }
    }

    .right-column {
      transition: width $transition-time ease 0s;
    }
  }

  &.expanded-profile {
    .left-column {
      .title,
      .profile-label {
        transform: translateY(-1in);
      }

      .skills li .spacer {
        flex-grow: 0;
        min-width: 60px;
        min-height: 40px;
      }
    }

    .right-column {
      width: 92px;
    }
  }
}

.right-column {
  &.lowered {
    .chevrons-row {
      min-height: 100%;
    }

    .history {
      margin-top: 1in;
    }
  }

  .chevrons-row {
    transition: min-height $transition-time ease 0s;
  }

  .history {
    transition: margin-top $transition-time ease 0s;
  }

  .chevrons {
    transition: flex-grow $transition-time ease $transition-time;
  }

  &.reverse {
    .chevrons-row {
      transition: min-height $transition-time ease $transition-time;
    }

    .history {
      transition: margin-top $transition-time ease $transition-time;
    }

    .chevrons {
      transition: flex-grow $transition-time ease 0s;
    }
  }
}

.chevrons.vertical {
  flex-direction: column;
  justify-content: space-between;
}
